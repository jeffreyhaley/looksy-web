'use strict';

angular.module('core', [ 'ngResource', 'ui.mask', 'ui.router', 'ui.bootstrap', 'ngAnimate' ])

.controller('MCoreController', [ '$scope', '$resource', 'communicator', 'ajax', '$log', '$modal', 'authenticate',
   function($scope, $resource, communicator, ajax, $log, $modal, authenticate) {
		
		// Get all of the states for the dropdown
		var request = {
		  module : 'core',
		  action : 'loadUser',
		  data : {}
        }
      
        var result = ajax.get(request, function(value, responseSuccess, error) {
          $scope.authenticated = value.authenticated;
        });
	
} ])

.factory('ajax', [ '$resource', function($resource) {
	return $resource('./index.php/:request', {
		request : '@request'
	});
} ])

.factory('communicator', [ '$rootScope', function($rootScope) {
	
	var obj = {};
	
	obj.data = {
		authenticated: false
	};
	
	obj.setData = function (data) {
		this.data = data;
		this.broadcast();
	};
	
	obj.broadcast = function () {
		$rootScope.$broadcast('broadcast');
	};
	
	return obj;
} ])

.service('locations', [ 'ajax', function(ajax) {
  	var request = {
  			module : 'location',
	        action : 'readLocation',
	        data : {}
	     }
	      
  	 return ajax.get(request);      
	
} ])

.service('tiles', [ 'ajax', function(ajax) {
  	var request = {
  			module : 'tile',
	        action : 'readTile',
	        data : {}
	     }
	      
  	 return ajax.get(request);      
	
} ])



var coreModule = angular.module('core');

var MHeaderController = coreModule.controller('MHeaderController', ['$scope', '$state', 'ajax', 'communicator', '$location', '$log', 'authenticate',
      function($scope, $state, ajax, communicator, $location, $log, authenticate) {

		$scope.authenticated = authenticate.data.authenticated;
		$scope.useremail = authenticate.data.useremail;
		$scope.userid = authenticate.data.userid;	

		$scope.logout = function() {
			
			communicator.setData({
				authenticated : false,
				useremail : false,
				userid : false
			});
			
			var request = {
					module: 'core',
					action: 'logout',
					data: {}
			}
				
			var result = ajax.get(request, function(value, responseSuccess) {
				$state.go('unauthenticated.signup');
				//window.location.reload();
			});
		}
		
		


} ])

/*
jeffrey.haley@gmail.com
3434343@232.com
*/
var coreModule = angular.module('core');

coreModule.run(function ($rootScope, $state, ajax, $log) {
//	 $log.error('here');
//	 var request = {
//				module: 'core',
//				action: 'loadUser',
//				data: {}
//		}
//		   var x = {};
//		var result = ajax.get(request, function(value, responseSuccess, error) {
//			 //$log.error($rootScope);
//			var x = value.data;		
//
//			    $rootScope.$on("$stateChangeStart", function(event, toState, toParams, fromState, fromParams){
//			      if (toState.authenticate && (!x.authenticated || typeof x.authenticated == 'undefined')){
//			    	  event.preventDefault(); 
//			    	  // User isnï¿½t authenticated
//			    	  $state.go('unauthenticated.signup');
//			      }
//			      
//		});	
//
//    })
 })

.config([ '$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {

	//$urlRouterProvider.when('/home', '/location');
	$urlRouterProvider.otherwise("/signup");


	  // Now set up the states
	  $stateProvider
	  .state('unauthenticated',{
		  	abstract: true,
		    url: '',
		    templateUrl:  './module/core/presentation/template/MCoreUnauthenticated.html'
		  })
		 .state('unauthenticated.signup',{
			 url: '/signup',
			 resolve: {
				 authenticate: function(ajax){
						var request = {
								module: 'core',
								action: 'loadUser',
								data: {}
						}
						
					 	return ajax.get(request).$promise;
					 }			
			 },
			 views: {
			      'header': {
			    	  templateUrl: './module/core/presentation/template/MCoreHeader.html',
			    	  controller: 'MHeaderController'
			      },
			      'signup': {
				      templateUrl: './module/signup/presentation/template/MSignup.html',
				      controller: 'MSignupController'
				        	
				  }
			    }
			  })		  
			  
	   .state('authenticated',{
		  	abstract: true,
		    url: '',
		    authenticate: true,
		    templateUrl:  './module/core/presentation/template/MCore.html'
		  })
	 .state('authenticated.location',{
		 url: '/location',
		 authenticate: true,
		 resolve: {
			 authenticate: function(ajax){	
					var request = {
							module: 'core',
							action: 'loadUser',
							data: {}
					}
					
				 	return ajax.get(request).$promise;
			 },
			 locations: function(ajax){					
					var request = {
							module: 'location',
							action: 'readLocation',
							data: {}
					}
					
				 	return ajax.get(request).$promise;
			 }
		 },
		 views: {
		      'header': {
		    	  templateUrl: './module/core/presentation/template/MCoreHeader.html',
		          controller: 'MHeaderController'
		      },
		      'content': {
			      templateUrl: './module/location/presentation/template/MLocation.html',
			      controller: 'MLocationController'
			  },
			  'footer': {
				  templateUrl: './module/core/presentation/template/MCoreFooter.html'
			  }
		    }
		  })	  
		  
	 .state('authenticated.tile', {
		 url: '/tile/:tileId',
		 //authenticate: true,
		 resolve: {
			 authenticate: function(ajax){	
					var request = {
							module: 'core',
							action: 'loadUser',
							data: {}
					}
					
				 	return ajax.get(request).$promise;
			 },
			 tile: function(ajax, $stateParams){
				 var request = {
			  			module : 'tile',
				        action : 'readTile',
				        data : JSON.stringify({'TileId' : $stateParams.tileId})
				     }
				      
				 return ajax.get(request).$promise; 
			  }
		 },
		 views: {
		      'header': {
		    	  templateUrl: './module/core/presentation/template/MCoreHeader.html',
		          controller: 'MHeaderController'
		      },
		      'content': {
		    	  templateUrl: './module/tile/presentation/template/MTileFull.html',
					 controller: 'MTileFullController'
			  },
			  'footer': {
				  templateUrl: './module/core/presentation/template/MCoreFooter.html'
			  }
		    }
		  })		
		  .state('authenticated.location.tile', {
		      url: '/:locationId/tile',
				 resolve: {
					 //authenticate: function(authenticate){return authenticate.$promise},
					 //tiles: function(tiles){return tiles.$promise}
				 },
		      templateUrl: './module/tile/presentation/template/MTile.html',
		      authenticate: true
		    })	
		  

		
//	    .state('tile', {
//			 url: '/tile/:tileId',
//			 resolve: {	
//				 tile: function(ajax, $stateParams){
//					 var request = {
//				  			module : 'tile',
//					        action : 'readTile',
//					        data : JSON.stringify({'TileId' : $stateParams.tileId})
//					     }
//					      
//					 return ajax.get(request).$promise; 
//				  }
//			 },			 
//			 templateUrl: './module/tile/presentation/template/MTileFull.html',
//			 controller: 'MTileFullController'
//		 })


	    
} ])
var coreModule = angular.module('core');

coreModule.directive("fileread",  [function () {
	 return {
	        scope: {
	            fileread: "="
	        },
	        require: 'ngModel',
	        link: function (scope, el, attrs, ngModel) {
//	        	ngModel.$render = function () {
//	                ngModel.$setViewValue(el.val());
//	            };
	            el.bind("change", function (changeEvent) {
	                var reader = new FileReader();
	                reader.onload = function (loadEvent) {
	                    scope.$apply(function () {
	                    	//ngModel.$render();
	                        scope.fileread = loadEvent.target.result;
	                    });
	                }
	                reader.readAsDataURL(changeEvent.target.files[0]);
	            });
	        }
	    }
}]);
var coreModule = angular.module('core');

var MLocationController = coreModule.controller('MLocationController', ['$scope', '$state', 'ajax', 'communicator', '$location', '$log', 'locations',
      function($scope, $state, ajax, communicator, $location, $log, locations) {
		
	
	
		/**
		 *  The location handler handles the CRUD operations
		 */
		$scope.locationHandler = {	
				loadLocation: function(locations) {
					$scope.loaded = false;
					
					if (typeof locations.data[0] != 'undefined') {
						$scope.location = locations.data[0];
						$scope.loaded = true;
				  	
						// Navigate to the tiles for location.
						$state.go('authenticated.location.tile', {locationId: $scope.location.LocationId});
					}
					else {
						
						$state.go('authenticated.location');
					}
					
					// Get all of the states for the dropdown
					var request = {
					  module : 'location',
					  action : 'readState',
					  data : {}
			        }
			      
			        var result = ajax.get(request, function(value, responseSuccess, error) {
			          $scope.states = value.data;
			        });
				},
				
			// Submit the location data
			submitLocation: function(locationform, action, location) {

				if (locationform.$valid){
					
					// Set the loading indicator
					$scope.locationHandler.loading = true;	

					var request = {
						module : 'location',
						action : action + 'Location',
						data : JSON.stringify(location)
					}
					
					var result = ajax.save(request, function(value, responseSuccess, error) {
						$scope.locationHandler.loading = true;	
						locationform.validation_LocationName_status = value.validation.LocationName.status;
						locationform.validation_LocationName_message = value.validation.LocationName.message;

						locationform.validation_LocationZip_status = value.validation.LocationZip.status;
						locationform.validation_LocationZip_message = value.validation.LocationZip.message;	
						
						// Alert success or error back to the user
						require(["./common/widget/alert/view/js/model/widget.alert.bo"], function (AlertWidget) {
							var aw = new AlertWidget();						
							aw.setSelector('#header-message');
							aw.initialize({message: 'test', status: 'success'});
							aw.addMessage(value);									
						});
					
						// Remove the loading status
						$scope.locationHandler.loading = false;
						
						// If successful, hide the modal and update the locations.
						if (value.status === 'success')
						{
							var modalId = (action === 'create' ? '#modal-location-new' : '#modal-location-' + location.LocationId);
							$(modalId).modal('hide');
							
							$(modalId).on('hidden.bs.modal', function () {
								// Refresh the locations
								var request = {
							          module : 'location',
							          action : 'readLocation',
							          data : {}
							    }

						        var result = ajax.get(request, function(value, responseSuccess, error) {
						        	// geocode the address
						        	var locationId = value.data[0].LocationId;
									var address = location.LocationAddress + ", " + location.LocationCity + ", " + location.USStateAbbr;
									var geocoder = new google.maps.Geocoder();
									geocoder.geocode( { 'address': address}, function(results, status) {
										if (status == google.maps.GeocoderStatus.OK) {
											var lat = results[0].geometry.location.d;
											var lng = results[0].geometry.location.e;
											var request = {
												module: 'location',
												action: 'updateGeoLocation',
												data: {
													LocationId: locationId,
													LocationLat: lat,
													LocationLng: lng
												}
											};
											var result = ajax.get(request, function(value, responseSuccess, error) {
												// errors ignored
											});
											
										} else {
											// errors ignored
										}
									});
						        	
						        	$scope.locationHandler.loadLocation(value);
						        });									
							});
							$scope.loaded = true;
						}
					});
					
				} else {
					$scope.locationHandler.showError = true;
				}
			},
			
			 /**
			  * Deletes the current location.
			  */
			deleteLocation : function(locationId) {
				var request = {
					module : 'location',
					action : 'deleteLocation',
					data : JSON.stringify({'locationId' : locationId})
				}

				// Set the loading status
				$scope.locationHandler.loading=true;
				
				var result = ajax.save(request, function(value, responseSuccess, error) {

					if (value.status === 'success')
					{
						// Refresh the locations
						var request = {
					          module : 'location',
					          action : 'readLocation',
					          data : {}
					        }
					      
				        var result = ajax.get(request, function(value, responseSuccess, error) {
				        	$scope.location = null;
				          	
				    		// Navigate to the tiles for location.
				        	$state.go('authenticated.location');
				        });
					}
					
					// Alert success or error back to the user
					require(["./common/widget/alert/view/js/model/widget.alert.bo"], function (AlertWidget) {
						var aw = new AlertWidget();						
						aw.setSelector('#header-message');
						aw.initialize({message: 'test', status: 'success'});
						aw.addMessage(value);									
					});

					// Remove the loading status
					$scope.locationHandler.loading=false;
					$scope.loaded = false;
				});				
			}
		}
		
		$scope.locationHandler.loadLocation(locations);


} ])
var coreModule = angular.module('core');

coreModule.controller('MLoginController', ['$scope', '$state', 'ajax', 'communicator', '$location', '$log',  
    function($scope, $state, ajax, communicator, $location, $log) {

	$scope.login = {
		submitLogin : function(loginform) {

			var request = {
				module : 'login',
				action : 'submitLogin',
				data : JSON.stringify($scope.login)
			}

			// Remove the loading status
			$scope.login.loading=true;
			$log.error('state-go0');
			// Make the request to log in.
			var result = ajax.get(request, function(value, responseSuccess, error) {
				$log.error('state-go1');
				// Remove the loading status
				$scope.login.loading=false;

				communicator.setData({
					authenticated : value.data.Authenticated,
					useremail : value.data.UserEmail,
					userid : value.data.UserId
				});
				$log.error('state-go2');

				if (value.data.Authenticated)
				{
					$log.error('state-go3');
					// Hide the login modal
					$('#modal-login').modal('hide');				
					
					$('#modal-login').on('hidden.bs.modal', function () {					
						// Navigate to the home page.
						$log.error('state-go4');
						$state.go('authenticated.location');
					});
				} 
				
				if (value.status == "error") {				
					$scope.login.message = value.message;	
				}
			});
		}
	}
} ]);
var coreModule = angular.module('core');

coreModule.controller('MSignupController', [ '$scope', '$state', 'ajax', '$location', 'communicator',
		function($scope, $state, ajax, $location, communicator) {

			$scope.signup = {					
				submitSignup : function(signupform) {
					
					// Start the spinner
					$scope.signup.loading = 1;
					
					var request = {
							module: 'signup',
							action: 'submitSignup',
							data: JSON.stringify($scope.signup)
					}

					var result = ajax.get(request, function(value, responseSuccess) {
						signupform.validation_email_status = value.validation.UserEmail.status;
						signupform.validation_email_message = value.validation.UserEmail.message;
						
						// If successful log in user
						if (value.status === "success")
						{							
							$scope.signup.loginSignup();
						}										
					});	
					
					// Stop the spinner
					$scope.signup.loading = 0;
				},
			
				loginSignup : function() {
					var request = {
							module : 'login',
							action : 'submitLogin',
							data : JSON.stringify($scope.signup)
					}
					
					// Make the request to log in.
					var result = ajax.get(request, function(value, responseSuccess, error) {						
						
						communicator.setData({
							authenticated : value.data.Authenticated,
							useremail : value.data.UserEmail,
							userid : value.data.UserId
						});
	
						if (value.data.Authenticated)
						{						
							// Navigate to the home page.
							$state.go('authenticated.location');
						} 
						
						if (value.status == "error") {				
							$scope.login.message = value.message;	
						}
					});
				}
			}
		} ]);

var coreModule = angular.module('core');
 
coreModule.controller('MTileController', ['$scope', '$state', 'ajax', 'communicator', '$location', '$log', '$stateParams',
     function($scope, $state, ajax, communicator, $location, $log, $stateParams) {  		
	
	
	    /**
	     * Define the Handler
	     */
		$scope.tileHandler = {
			
			// Get all of the tiles for display
			loadTile: function() {							
				var request = {
						module : 'tile',
						action : 'readTile',
						data : JSON.stringify({'LocationId' : $stateParams.locationId})
				     }
				   
				var result = ajax.get(request, function(value, responseSuccess, error) {
					_.map(value.data, function(tile) {	
						tile.TileCreationTime = moment(tile.TileCreationTime, "YYYYMMDD, h:mm:ss a Z").fromNow();
					})
					
					$scope.tiles = value.data;						
				});	
			},
			
			// Get the full tile
			loadFullTile: function(tileId) {				
				$state.go('authenticated.tile', {tileId: tileId});
			},
			
			rotate: function() {
				
				if (!$scope.tileHandler.degClockwise)
					$scope.tileHandler.degClockwise = 90;
				else
					$scope.tileHandler.degClockwise += 90;
				
				var degStr = "rotate(" + $scope.tileHandler.degClockwise + "deg)";
				var parentElem = angular.element("#imagePreviewContainer");
				var imgElem = parentElem.find("img");
				imgElem.css({
					'transform' : degStr,
					'-ms-transform' : degStr,
					'-webkit-transform' : degStr
				});
				
			},
			
			// Submit the tile changes
			submitTile: function(tileform, action, tile) {
				if (tileform.$valid){
					
					// Set the loading flag
					$scope.tileHandler.loading = true;
					
					// Set the location Id
					tile.locationId = $stateParams.locationId | tile.LocationId;
					tile.rotateImage = $scope.tileHandler.degClockwise;
					
					var request = {
							module : 'tile',
							action : action + 'Tile',
							data : JSON.stringify(tile)
					}
   
					var result = ajax.save(request, function(value, responseSuccess, error) { 
						// Remove the loading status
						$scope.tileHandler.loading = false;						
						
						// If the save was successful, remove the modal and reload the tiles.
						if (value.status == "success") {
							
							// Get the modal id
							var modalId = (action === 'create' ? '#modal-tile-new' : '#modal-tile-' + tile.TileId);
							$(modalId).modal('hide');
							
							// When the modal is hidden, reload the tiles.
							$(modalId).on('hidden.bs.modal', function () {
								// Reload tiles
								var request = {
										module : 'tile',
										action : 'readTile',
										data : JSON.stringify({'LocationId' : $stateParams.locationId})
								     }
								   
								var result = ajax.get(request, function(value, responseSuccess, error) {
									$scope.tileHandler.loadTile();
								});
							});
							
							// If deleting just re-load tiles
							if (action == 'delete') {
								$scope.tileHandler.loadTile();
							}
													
							// Clear the tile modal
							$scope.tile = false;
							$('.fileinput').fileinput('clear');
							$scope.tileHandler.showError = false;							
						}
						
						// Alert success or error back to the user
						require(["./common/widget/alert/view/js/model/widget.alert.bo"], function (AlertWidget) {
							var aw = new AlertWidget();            
							aw.setSelector('#header-message');
							aw.initialize({message: 'test', status: 'success'});
							aw.addMessage(value);
						});
						
					});
				} else {
					$scope.tileHandler.showError = true;
				}
			}
       }

		// Load tiles on load.
		$scope.tileHandler.loadTile();	
} ]);

var coreModule = angular.module('core');
 
coreModule.controller('MTileFullController', ['$scope', '$state', 'ajax', 'communicator', '$location', '$log', 'tile',
     function($scope, $state, ajax, communicator, $location, $log, tile) {  		
		if (typeof tile.data[0] != 'undefined') {
			$scope.tile = tile.data[0];
			
			$scope.tile.TileCreationTime = moment(tile.data[0].TileCreationTime, "YYYYMMDD, h:mm:ss a Z").fromNow();
		}
} ]);